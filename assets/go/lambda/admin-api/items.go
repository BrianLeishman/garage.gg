package main

import (
	"bytes"
	"net/http"
	"os"
	"path/filepath"
	"time"

	vgg "github.com/BrianLeishman/garage.gg/assets/go"
	"github.com/gin-gonic/gin"
	"github.com/go-git/go-billy/v5/memfs"
	"github.com/go-git/go-git/v5"
	"github.com/go-git/go-git/v5/plumbing/object"
	transport "github.com/go-git/go-git/v5/plumbing/transport/http"
	"github.com/go-git/go-git/v5/storage/memory"
	"github.com/pkg/errors"
	"github.com/rs/xid"
	"gopkg.in/yaml.v2"
)

func init() {
	r.POST("/items", hItemCreate)
	// r.PATCH("/users/:user/verify", hUserVerify)
	// r.GET("/users/:user", hUserGet)
}

type Item struct {
	ID          string   `dynamo:"pk" json:"id" yaml:"-" binding:"omitempty,startswith=item_,xid,len=25" mod:"trim"`
	Group       string   `dynamo:"sk" json:"group" yaml:"-" binding:"required,max=255" mod:"trim"`
	Name        string   `dynamo:"name" json:"name" yaml:"title" binding:"required,max=255" mod:"trim"`
	Description string   `dynamo:"desc" json:"description" yaml:"description" binding:"required,max=1024" mod:"trim"`
	Price       float64  `dynamo:"price" json:"price" yaml:"price" binding:"required,gt=0"`
	Sizes       []string `dynamo:"sizes" json:"sizes" yaml:"sizes" binding:"required"`
	Images      []string `dynamo:"images" json:"images" yaml:"images" binding:"required"`
	Body        string   `dynamo:"body" json:"body" yaml:"-" binding:"required" mod:"trim"`
	Draft       bool     `dynamo:"draft" json:"draft" yaml:"draft"`
	Slug        string   `dynamo:"slug" json:"slug" yaml:"slug" binding:"required,max=255" mod:"trim,lcase,tprefix=/"`
	Categories  []string `dynamo:"categories" json:"categories" yaml:"categories" binding:"required" mod:"trim"`
}

func (i *Item) Markdown() []byte {
	buf := new(bytes.Buffer)
	buf.WriteString(`---
#*****************************************************************************
# This code has been generated by the admin API.
# DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
#****************************************************************************/

`)

	yaml.NewEncoder(buf).Encode(i)

	buf.WriteString("\n---\n\n")
	buf.WriteString(i.Body)

	return buf.Bytes()
}

func commitItem(item Item) error {
	fs := memfs.New()

	r, err := git.Clone(memory.NewStorage(), fs, &git.CloneOptions{
		URL:   os.Getenv("REPO"),
		Depth: 1,
	})
	if err != nil {
		return errors.Wrapf(err, "failed to clone repo to memory")
	}

	w, err := r.Worktree()
	if err != nil {
		return errors.Wrapf(err, "failed to get worktree")
	}

	dir := filepath.Join("content", "shop")
	err = fs.MkdirAll(dir, os.ModePerm)
	if err != nil {
		return errors.Wrapf(err, "failed to create shop dir")
	}

	filename := filepath.Join(dir, item.ID+".md")
	f, err := fs.Create(filename)
	if err != nil {
		return errors.Wrapf(err, "failed to create new shop item file in memory")
	}

	_, err = f.Write(item.Markdown())
	if err != nil {
		return errors.Wrapf(err, "failed to write new shop item file in memory")
	}

	_, err = w.Add(filename)
	if err != nil {
		return errors.Wrapf(err, "failed to git-add new item file")
	}

	_, err = w.Commit(item.ID, &git.CommitOptions{
		Author: &object.Signature{
			Name:  "Admin API",
			Email: "brian@garage.gg",
			When:  time.Now(),
		},
	})
	if err != nil {
		return errors.Wrapf(err, "failed to commit new item file")
	}

	auth := &transport.BasicAuth{
		Username: os.Getenv("GH_USER"),
		Password: os.Getenv("GH_PAT"),
	}

	err = r.Push(&git.PushOptions{
		RemoteName: "origin",
		Auth:       auth,
	})
	if err != nil {
		return errors.Wrapf(err, "failed to push new item file")
	}

	return nil
}

func hItemCreate(c *gin.Context) {
	var req struct {
		Item
	}
	if !vgg.BindJSON(c, &req) {
		return
	}

	req.Item.ID = "item_" + xid.New().String()

	err := table.Put(req.Item).Run()
	if err != nil {
		c.AbortWithError(http.StatusInternalServerError, errors.Wrapf(err, "failed to insert item"))
		return
	}

	err = commitItem(req.Item)
	if err != nil {
		c.AbortWithError(http.StatusInternalServerError, errors.Wrapf(err, "failed to create item in rpeo"))
		return
	}

	c.JSON(http.StatusCreated, gin.H{
		"id": req.Item.ID,
	})
}
